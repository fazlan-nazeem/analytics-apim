/* Enter a unique ExecutionPlan */

@Plan:name('APIMAnalytics-HealthAvailabilityPerMinAlert-HealthAvailabilityPerMin-realtime1')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Plan:trace('false')

@Plan:statistics('false')

                                @Import('org.wso2.apimgt.statistics.perMinuteRequest:1.0.0')
								define stream requestPerMinStream (meta_clientType string, year int, month int, day int, hour int, minute int, consumerKey string, context string, 
																   api_version string, api string, version string, requestTime long, userId string, hostName string, apiPublisher string, 
																   total_request_count long, resourceTemplate string, method string, applicationName string, tenantDomain string, 
																   userAgent string, resourcePath string, request int, applicationId string, tier string, throttledOut bool, clientIp string,
																   applicationOwner string, _timestamp long);
    
                                @Import('org.wso2.apimgt.statistics.perMinuteResponse:1.0.0')
								define stream responseSummaryStream (meta_clientType string, year int, month int, day int, hour int, minute int, context string, api_version string, 
																	 api string, resourceTemplate string, version string, tenantDomain string, hostName string, apiPublisher string, 
																	 destination string, consumerKey string, resourcePath string, method string, response int, responseTime long, 
																	 serviceTime long, backendTime long, username string, eventTime long, applicationName string, applicationId string, 
																	 cacheHit bool, responseSize long, protocol string, responseCode int, total_response_count long, _timestamp long);
								
								@Import('org.wso2.apimgt.statistics.response:1.1.0')
                                define stream responseStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, 
															  resourceTemplate string, method string, version string, response int, responseTime long, serviceTime long, backendTime long, 
															  username string, eventTime long, tenantDomain string, hostName string, apiPublisher string, applicationName string, 
															  applicationId string, cacheHit bool, responseSize long, protocol string, responseCode int, destination string);


                                /* First define response/request count streams */

                                /*@Export('org.wso2.analytics.apim.healthAvailabilityAlertStream:1.0.0')
                                define stream minStatusTestStream (api_version string, status bool, reason string);*/

                                @Export('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
                                define stream allApimAlertStream (type string, tenantDomain string, msg string, severity int, alertTimestamp long);

                                @Export('org.wso2.analytics.apim.apiHealthMonitorAlertStream:1.0.0')
                                define stream apiHealthMonitorAlertStream (api_version string, apiPublisher string, tenantDomain string, msg string, severity int, alertTimestamp long);

                                /*  -- Event tables -- */

                                /* Lower percentiles */
                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_REQUESTPERAPIPERCENTILE',  primary.keys = 'api_version, tenantDomain')
                                define table requestPerApiPercentileTable (requestsPerMinPerApiLowerPercentile double, api_version string, tenantDomain string);

                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_RESPONSEPERAPIPERCENTILE',  primary.keys = 'api_version, tenantDomain')
                                define table responsePerApiPercentileTable (api_version string, tenantDomain string, responsesPerMinPerApiLowerPercentile double);

                                /* Then define response time streams */
                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_RESPONSETIMEPERAPIPERCENTILE',  primary.keys = 'api_version, tenantDomain')
                                define table responseTimePerApiPercentileTable (api_version string, tenantDomain string, responseTimePerApiUpperPercentile double);

                                /* API status availability table */
                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_APIAVAILABILITY',  primary.keys = 'api_version, tenantDomain', indices='api_version, tenantDomain, status')
                                define table apiAvailabilityTable (api_version string, tenantDomain string, status string);

                                /* APIHEALTHMONITORALERTSTREAM TABLE */
                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_APIHEALTHMONITORALERTSTREAM')
                                define table apiHealthMonitorAlertStreamTable (api_version string, apiPublisher string, tenantDomain string, msg string, alertTimestamp long);

                                /* timeBatch used because Minutely updates are needed */
                                @info(name = 'query1')
                                from requestPerMinStream
                                select  api_version, apiPublisher, tenantDomain, sum(total_request_count) as  requestsPerMinPerApi
                                group by api_version, tenantDomain
                                insert into requestPerApiCountStream;

                                @info(name = 'query2')
                                from responseSummaryStream
                                select  api_version, tenantDomain,  sum(total_response_count) as  responsesPerMinPerApi
                                group by api_version, tenantDomain
                                insert into responsePerApiCountStream;
								
								 /* Creating requests stream with percentiles*/
                                @info(name = 'query3')
                                from requestPerApiCountStream join requestPerApiPercentileTable on (requestPerApiCountStream.api_version == requestPerApiPercentileTable.api_version AND requestPerApiCountStream.tenantDomain == requestPerApiPercentileTable.tenantDomain)
                                select requestPerApiCountStream.api_version as api_version, requestPerApiCountStream.tenantDomain as tenantDomain, requestPerApiCountStream.apiPublisher as apiPublisher, requestsPerMinPerApi as requestsPerMin, requestsPerMinPerApiLowerPercentile as requestsPerMinLowerPercentile
                                insert into requestsPercentileStream;
								
								/* Creating responses stream with percentiles  */
                                @info(name = 'query4')
                                from responsePerApiCountStream join responsePerApiPercentileTable on (responsePerApiCountStream.api_version == responsePerApiPercentileTable.api_version AND responsePerApiCountStream.tenantDomain == responsePerApiPercentileTable.tenantDomain)
                                select responsePerApiCountStream.api_version as api_version, responsePerApiCountStream.tenantDomain as tenantDomain,responsesPerMinPerApi as responsesPerMin, responsesPerMinPerApiLowerPercentile as responsesPerMinLowerPercentile
                                insert into responsesPercentileStream;
								
								/* Combine*/

        @info(name = 'query5')
                                                                from requestsPercentileStream as requestsPercentileStreamWindow left outer join responsesPercentileStream as responsesPercentileStreamWindow on (requestsPercentileStreamWindow.api_version == responsesPercentileStreamWindow.api_version AND requestsPercentileStreamWindow.tenantDomain == responsesPercentileStreamWindow.tenantDomain)
                                                                select requestsPercentileStreamWindow.api_version as api_version, requestsPercentileStreamWindow.apiPublisher as apiPublisher, requestsPercentileStreamWindow.requestsPerMin as requestsPerMin,requestsPercentileStreamWindow.requestsPerMinLowerPercentile as requestsPerMinLowerPercentile,
                                                                ifThenElse(responsesPercentileStreamWindow.responsesPerMin is null, convert(0, 'long'), responsesPercentileStreamWindow.responsesPerMin) as responsesPerMin, requestsPercentileStreamWindow.tenantDomain ,ifThenElse(responsesPercentileStreamWindow.responsesPerMinLowerPercentile is null, 1.0, responsesPercentileStreamWindow.responsesPerMinLowerPercentile) as responsesPerMinLowerPercentile
                                insert into requestResponseSummaryStream;
                                                                
                                                                @info(name = 'query6')
                                                                from every (e1=requestResponseSummaryStream[requestsPerMin > requestsPerMinLowerPercentile AND responsesPerMin < responsesPerMinLowerPercentile]) -> e2=requestResponseSummaryStream [e1.api_version == api_version AND e1.tenantDomain == tenantDomain AND requestsPerMin > requestsPerMinLowerPercentile AND responsesPerMin < responsesPerMinLowerPercentile] <1:>
                                                                select e1.api_version as api_version , ifThenElse(e1.tenantDomain == 'carbon.super', str:concat(e1.apiPublisher, "@carbon.super"), e1.apiPublisher) as apiPublisher, e1.tenantDomain, str:concat('Response count is lower than ' , e1.responsesPerMinLowerPercentile, ' continuously for 5 or more minutes.')  as msg, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
                                                                insert into apiHealthMonitorAlertStream;
																
							    /* Now start response time queries */

                                                                @info(name = 'query7')
                                                                from responseSummaryStream
                                                                select api_version, apiPublisher, responseTime, tenantDomain
                                                                insert into responseTimeSummaryStream;
																
							      /*spark script calculates percentile of responseTime and stores in percentileTable */

                                                                @info(name = 'query8')
                                                                from responseTimeSummaryStream join responseTimePerApiPercentileTable
                                                                on (responseTimeSummaryStream.api_version==responseTimePerApiPercentileTable.api_version AND responseTimeSummaryStream.tenantDomain==responseTimePerApiPercentileTable.tenantDomain)
                                                                select responseTimeSummaryStream.api_version, responseTimeSummaryStream.apiPublisher, responseTimeSummaryStream.tenantDomain, responseTimeSummaryStream.responseTime, responseTimePerApiPercentileTable.responseTimePerApiUpperPercentile
                                                                insert into responseInfoStream;
																
																 @info(name = 'query9')
                                                                from every (e1=responseInfoStream[responseTime>responseTimePerApiUpperPercentile]) -> e2=responseInfoStream [e1.api_version == api_version AND e1.tenantDomain == tenantDomain AND responseTime>responseTimePerApiUpperPercentile] <4:>
                                                                select e1.api_version, ifThenElse(e1.tenantDomain == 'carbon.super', str:concat(e1.apiPublisher, "@carbon.super"), e1.apiPublisher) as apiPublisher, e1.tenantDomain, str:concat('Response time is higher than ' , e1.responseTimePerApiUpperPercentile, ' ms continuously for 5 or more responses.') as msg, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
                                                                insert into apiHealthMonitorAlertStream;
																
									@info(name = 'query10')
                                from responseStream
                                select api_version, apiPublisher,  responseCode, tenantDomain
                                insert into responseCodeSummaryStream;

                                @info(name = 'query11')
                                from every (e1=responseCodeSummaryStream[responseCode > 499 AND responseCode < 600]) -> e2=responseCodeSummaryStream [e1.api_version == api_version AND e1.tenantDomain == tenantDomain AND responseCode > 499 AND responseCode < 600]  <4:>
                                select e1.api_version, ifThenElse(e1.tenantDomain == 'carbon.super', str:concat(e1.apiPublisher, "@carbon.super"), e1.apiPublisher) as apiPublisher, e1.tenantDomain, 'Server error occurred continuously for 5 or more times.'  as msg, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
                                insert into apiHealthMonitorAlertStream;
								

                                @info(name='query12')
                                from apiHealthMonitorAlertStream
                                select 'healthAvailabilityPerMin' as type, tenantDomain, str:concat('API:', api_version, '-', msg) as msg , severity, (time:timestampInMilliseconds()) as alertTimestamp
                                insert into allApimAlertStream;

                                /* update apiAvailability Table */


                                @info(name='query13')
                                from apiHealthMonitorAlertStream[((api_version == apiAvailabilityTable.api_version AND tenantDomain == apiAvailabilityTable.tenantDomain) in apiAvailabilityTable)]
                                select api_version, tenantDomain,msg as status
                                update apiAvailabilityTable
                                on (api_version == apiAvailabilityTable.api_version AND tenantDomain == apiAvailabilityTable.tenantDomain);

                                @info(name='query14')
                                from apiHealthMonitorAlertStream[ not ((api_version == apiAvailabilityTable.api_version AND tenantDomain == apiAvailabilityTable.tenantDomain) in apiAvailabilityTable)]
                                select api_version, tenantDomain, msg as status
                                insert into apiAvailabilityTable;

                                @info(name='query15')
                                from requestPerMinStream[(not ((api_version == apiHealthMonitorAlertStreamTable.api_version AND tenantDomain == apiHealthMonitorAlertStreamTable.tenantDomain) in apiHealthMonitorAlertStreamTable)) and (not ((api_version == apiAvailabilityTable.api_version AND tenantDomain == apiAvailabilityTable.tenantDomain) in apiAvailabilityTable))]
                                select api_version , tenantDomain, 'Available' as status
                                insert into apiAvailabilityTable;

                                @info(name='query16')
                                from requestPerMinStream as r join apiHealthMonitorAlertStreamTable
                                on (r.api_version == apiHealthMonitorAlertStreamTable.api_version AND tenantDomain == apiHealthMonitorAlertStreamTable.tenantDomain )
                                select r.api_version, r.tenantDomain, alertTimestamp
                                insert into tempStream;


                                @info(name='query17')
                                from tempStream[(time:timestampInMilliseconds() - alertTimestamp) > 300000]
                                select api_version , tenantDomain, 'Available' as status
                                update apiAvailabilityTable
                                on (api_version == apiAvailabilityTable.api_version AND tenantDomain == apiAvailabilityTable.tenantDomain);