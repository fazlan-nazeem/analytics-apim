/*
    Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

@App:name('APIM_ACCESS_SUMMARY')
@App:description('Do aggregations to the request events and store in the database.')

@source(type='inMemory' , topic='APIM_REQUEST')
define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string,apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string);

define stream FilteredRequest (apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, apiHostname string, applicationId string, applicationName string, apiResourceTemplate string, apiMethod string, gatewayType string, label string, requestTimestamp long);

define stream FilteredExecRequest (apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, apiHostname string, apiResourceTemplate string, apiMethod string, responseTime long, serviceTime long, backendTime long, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long,  otherLatency long, requestTimestamp long);

define stream ApiUsagePerVersionFilteredStream (apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, apiHostname string, applicationId string, applicationName string, quotaExceededValue int, requestTimestamp long, gatewayType string, label string);

define stream ApiUserAgentFilteredStreamExtend (apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, operatingSystem string, browser string, requestTimestamp long, gatewayType string, label string);

define stream ApiUserAgentFilteredStream(apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, operatingSystem string, browser string, requestTimestamp long, gatewayType string, label string);

define stream geoTempStream(apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, username string, userTenantDomain string, country string, city string, requestTimestamp long);

@Async(buffer.size = '131072', workers = '5', batch.size.max = '32768')
define stream GeoIntrim(apiName string, apiVersion string, apiContext string, apiCreator string, apiCreatorTenantDomain string, username string, userTenantDomain string, userIp string, requestTimestamp long);

@Async(buffer.size = '256', workers = '1', batch.size.max = '256')
define stream RequestInterm(apiContext string, apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, applicationOwner string, requestTimestamp long);

-- Aggregations

--Geo Location Aggregations
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation GeoLocationAgg
from geoTempStream
select apiName, apiVersion, apiCreator, apiCreatorTenantDomain, username, userTenantDomain, country, city, count() as totalCount, 'default' as regionalID
group by apiContext, country, city
aggregate by requestTimestamp every seconds...years;

-- API usage per version summary. (Specific to an application)
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiVersionPerAppAgg
from ApiUsagePerVersionFilteredStream
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationName, count() as totalRequestCount, sum(quotaExceededValue) as aboveQuotaCount, gatewayType, label, 'default' as regionalID
group by apiContext, apiHostname, applicationId
aggregate by requestTimestamp every seconds...years;

-- API usage summary per resource path. (Specific to an application)
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB',field.length = "apiHostname:200, apiMethod:20")
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiResPathPerApp
from FilteredRequest
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, apiResourceTemplate, apiMethod, count() as totalRequestCount, gatewayType, label,'default' as regionalID
group by apiContext, apiHostname, applicationId, apiResourceTemplate, apiMethod
aggregate by requestTimestamp every seconds...years;

-- API usage summary per destination.
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiPerDestinationAgg
from Request
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, destination, count() as totalRequestCount, gatewayType, label, 'default' as regionalID
group by apiContext, apiHostname, destination
aggregate by requestTimestamp every seconds...years;

-- Overall API usage summary. depends on the user and the application.
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB', field.length = "apiHostname:200, username:150, userTenantDomain:150")
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiUserPerAppAgg
from Request
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, applicationOwner, username, userTenantDomain, count() as totalRequestCount, gatewayType, label, 'default' as regionalID
group by apiContext, apiHostname, applicationId, username, userTenantDomain
aggregate by requestTimestamp every seconds...years;

-- API user browser summary
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB',field.length = "apiCreator:150, apiCreatorTenantDomain:150, browser:200")
@purge(enable='true', interval='60 min', @retentionPeriod(sec='5 minutes', min='72 hours', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiUserBrowserAgg
from ApiUserAgentFilteredStreamExtend
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, operatingSystem, browser, count() as totalRequestCount, gatewayType, label, 'default' as regionalID
group by apiContext, apiCreator, apiCreatorTenantDomain, operatingSystem, browser
aggregate by requestTimestamp every seconds...years;

-- API usage execution summary
@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='1 hour', min='3 days', hours='90 days', days='1 year', months='10 years'))
define aggregation ApiExeTime
from FilteredExecRequest
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, apiResourceTemplate, apiMethod, avg(responseTime) as responseTime, avg(serviceTime) as serviceTime, avg(backendTime) as backendTime, avg(securityLatency) as securityLatency, avg(throttlingLatency) as throttlingLatency, avg(requestMedLat) as requestMedLat, avg(responseMedLat) as responseMedLat, avg(backendLatency) as backendLatency, avg(otherLatency) as otherLatency, 'default' as regionalID
group by apiContext, apiHostname, apiResourceTemplate, apiMethod
aggregate by requestTimestamp every seconds...years;

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@primaryKey('apiName', 'apiCreator', 'apiCreatorTenantDomain')
define table ApiLastAccessSummary (apiContext string, apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, applicationOwner string, lastAccessTime long);

@info(name='Add to buffer')
from Request
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, username, userTenantDomain, userIp, requestTimestamp
insert into GeoIntrim;

-- Queries
@info(name='Resolve geo attributes')
from GeoIntrim
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, username, userTenantDomain, ifThenElse(geo:findCountryFromIP(userIp)=="", "N/A", geo:findCountryFromIP(userIp)) as country, ifThenElse(geo:findCityFromIP(userIp)=="", "N/A", geo:findCityFromIP(userIp)) as city, requestTimestamp
insert into geoTempStream;

@info(name='Resolve api usage')
from Request
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, ifThenElse(throttledOut, 1, 0) as quotaExceededValue, requestTimestamp,
    gatewayType, label
insert current events into ApiUsagePerVersionFilteredStream;

@info(name='Resolve user agent')
from Request
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain,
    ifThenElse(userAgent is null, 'Other', env:getUserAgentProperty(userAgent,'os')) as operatingSystem, ifThenElse(userAgent is null, 'Other', env:getUserAgentProperty(userAgent,'browser')) as browser,
    requestTimestamp, gatewayType, label
insert current events into ApiUserAgentFilteredStream;

-- This was added as a fix to an error when connecting to Mysql RDBMS when UTF8 character set is used (https://github.com/wso2/analytics-solutions/issues/182).
@info(name='Trim attribute values')
from ApiUserAgentFilteredStream
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, operatingSystem, ifThenElse(str:length(browser)>200, str:substr(browser,0,200), browser) as browser,requestTimestamp, gatewayType, label
insert into ApiUserAgentFilteredStreamExtend;

-- Filter the event with the most recent request timestamp
@info(name='Batch Requests')
from Request
select apiContext, apiName, apiVersion, apiCreator, apiCreatorTenantDomain, applicationOwner, requestTimestamp
group by apiName, apiCreatorTenantDomain, apiCreator
output last every 1 minutes
insert into RequestInterim;

@info(name='Filter events to check latest timestamp')
from RequestInterim as R left outer join ApiLastAccessSummary as S
on R.apiName == S.apiName and R.apiCreatorTenantDomain == S.apiCreatorTenantDomain and R.apiCreator == S.apiCreator
select R.apiContext, R.apiName, R.apiVersion, R.apiCreator, R.apiCreatorTenantDomain, R.applicationOwner, R.requestTimestamp as lastAccessTime
having R.requestTimestamp >= S.lastAccessTime or S.lastAccessTime is null
insert into ApiLastAccessUpdateStream;

@info(name='Upate/Insert ApiLastAccessSummary')
from ApiLastAccessUpdateStream
select apiContext, apiName, apiVersion, apiCreator,apiCreatorTenantDomain, applicationOwner, lastAccessTime
update or insert into ApiLastAccessSummary
set ApiLastAccessSummary.apiContext = apiContext, ApiLastAccessSummary.apiVersion = apiVersion, ApiLastAccessSummary.applicationOwner = applicationOwner, ApiLastAccessSummary.lastAccessTime = lastAccessTime
on ApiLastAccessSummary.apiName == apiName and ApiLastAccessSummary.apiCreatorTenantDomain == apiCreatorTenantDomain and ApiLastAccessSummary.apiCreator == apiCreator;

-- Filter GraphQL APIs for per resource aggregations
from Request[apiMethod == 'QUERY' OR apiMethod == 'MUTATION' OR apiMethod == 'SUBSCRIPTION']
select *
insert into RequestForGraphQL;

from Request[apiMethod != 'QUERY' AND apiMethod != 'MUTATION' AND apiMethod != 'SUBSCRIPTION']
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, apiResourceTemplate, apiMethod, gatewayType, label, requestTimestamp
insert into FilteredRequest;

from RequestForGraphQL#str:tokenize(apiResourceTemplate , ',')
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, token as apiResourceTemplate, apiMethod, gatewayType, label, requestTimestamp
insert into FilteredRequest;

-- Filter GraphQL APIs for per resource execution time aggregations

from Request[apiMethod != 'QUERY' AND apiMethod != 'MUTATION' AND apiMethod != 'SUBSCRIPTION']
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, apiResourceTemplate, apiMethod, responseTime, serviceTime, backendTime, securityLatency, throttlingLatency,  requestMedLat, responseMedLat,  backendLatency,  otherLatency, requestTimestamp
insert into FilteredExecRequest;

from RequestForGraphQL#str:tokenize(apiResourceTemplate , ',')
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, token as apiResourceTemplate, apiMethod, responseTime,  serviceTime, backendTime, securityLatency, throttlingLatency, requestMedLat, responseMedLat,  backendLatency, otherLatency, requestTimestamp
insert into FilteredExecRequest;